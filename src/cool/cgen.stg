sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

program(integerLiterals, strLiterals, classNames, classProto, protoDefinitions, classTables, classInits, textFuncs, data, textMain) ::= <<
    .data
    .align 2
    .globl  class_nameTab
    .globl  Int_protObj
    .globl  String_protObj
    .globl  bool_const0
    .globl  bool_const1
    .globl  Main_protObj
    .globl  _int_tag
    .globl  _string_tag
    .globl  _bool_tag
_int_tag:
    .word   2
_string_tag:
    .word   3
_bool_tag:
    .word   4
<strLiterals>
<integerLiterals>
bool_const0:
    .word   4
    .word   4
    .word   Bool_dispTab
    .word   0
bool_const1:
    .word   4
    .word   4
    .word   Bool_dispTab
    .word   1
class_nameTab:
    .word str_const1
    .word str_const2
    .word str_const3
    .word str_const4
    .word str_const5
    <sequence (classNames:defineWord())>
class_objTab:
    .word Object_protObj
    .word Object_init
    .word IO_protObj
    .word IO_init
    .word Int_protObj
    .word Int_init
    .word String_protObj
    .word String_init
    .word Bool_protObj
    .word Bool_init
    <sequence (classProto:defineWord())>
Object_protObj:
    .word 0
    .word 3
    .word Object_dispTab
IO_protObj:
    .word 1
    .word 3
    .word IO_dispTab
Int_protObj:
    .word 2
    .word 4
    .word Int_dispTab
    .word 0
String_protObj:
    .word 3
    .word 5
    .word String_dispTab
    .word int_const0
    .asciiz ""
    .align 2
Bool_protObj:
    .word 4
    .word 4
    .word Bool_dispTab
    .word 0
<protoDefinitions>
Object_dispTab:
    .word Object.abort
    .word Object.type_name
    .word Object.copy
IO_dispTab:
    .word Object.abort
    .word Object.type_name
    .word Object.copy
    .word IO.out_string
    .word IO.out_int
    .word IO.in_string
    .word IO.in_int
Int_dispTab:
    .word Object.abort
    .word Object.type_name
    .word Object.copy
String_dispTab:
    .word Object.abort
    .word Object.type_name
    .word Object.copy
    .word String.length
    .word String.concat
    .word String.substr
Bool_dispTab:
    .word Object.abort
    .word Object.type_name
    .word Object.copy
<classTables>
    .globl heap_start
heap_start:
    .word 0
    .text
    .globl  Int_init
    .globl  String_init
    .globl  Bool_init
    .globl  Main_init
    .globl  Main.main
Object_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
IO_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     Object_init
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
Int_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     Object_init
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
String_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     Object_init
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
Bool_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     Object_init
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
<classInits><textFuncs>
>>

defineIntLiterals(labelNumber, number) ::= <<
int_const<labelNumber>:
    .word 2
    .word 4
    .word Int_dispTab
    .word <number>
>>

defineStrLiterals(labelNumber, len, intConst, string) ::= <<
str_const<labelNumber>:
    .word 3
    .word <len>
    .word String_dispTab
    .word int_const<intConst>
    .asciiz "<string>"
    .align 2
>>

defineProto(objName, objNumber, size, attributes) ::= <<
<objName>_protObj:
    .word <objNumber>
    .word <size>
    .word <objName>_dispTab
    <sequence (attributes:defineWord())>

>>

defineWord(word) ::= <<
.word <word>
>>

defineFuncTables(className, functionName) ::= <<
<className>_dispTab:
    <sequence (functionName:defineWord())>

>>

initClass(className, parent, attr) ::= <<
<className>_init:
    addiu $sp $sp -12
    sw $fp 12($sp)
    sw $s0 8($sp)
    sw $ra 4($sp)
    addiu $fp $sp 4
    move $s0 $a0
    jal <parent>_init
<attr>
    move $a0 $s0
    lw $fp 12($sp)
    lw $s0 8($sp)
    lw $ra 4($sp)
    addiu $sp $sp 12
    jr $ra

>>

defineFunction(name, body, removeParams, removeLocals, initLocals) ::= <<
<name>:
    addiu $sp $sp -12
    sw $fp 12($sp)
    sw $s0 8($sp)
    sw $ra 4($sp)
    addiu $fp $sp 4
<initLocals>
    move $s0 $a0
<body>
<removeLocals>
    lw $fp 12($sp)
    lw $s0 8($sp)
    lw $ra 4($sp)
    addiu $sp $sp 12
<removeParams>
    jr $ra

>>

init_locals(offset) ::= <<
    addiu $sp $sp <offset> # locals alloc
>>

freeParams(offset, name) ::= <<
    addiu $sp $sp <offset> # <name> free
>>

initAttr(expr, offset) ::= <<
<expr>
    sw $a0 <offset>($s0)
>>

literal(constant) ::= <<
    la $a0 <constant>
>>

callFunction(expr, dispatchNumber, fileNameConst, line, methodOffset, params, loadDispTable) ::= <<
<params><expr>
    bnez $a0 dispatch<dispatchNumber>
    la $a0 str_const<fileNameConst>
    li $t1 <line>
    jal _dispatch_abort
dispatch<dispatchNumber>:
<loadDispTable> # dispatch table
    lw $t1 <methodOffset>($t1) # method offset
    jalr $t1
>>

loadSpecificDispTable(name) ::= <<
    la $t1 <name>_dispTab
>>

loadDispTab() ::= <<
    lw $t1 8($a0)
>>

dispatchOnSelf() ::= <<
    move $a0 $s0
>>

loadAttribute(offset) ::= <<
    lw $a0 <offset>($s0)
>>

storeAttribute(offset) ::= <<
    sw $a0 <offset>($s0)
>>

loadFormal(offset) ::= <<
    lw $a0 <offset>($fp)
>>

storeFormal(offset) ::= <<
    sw $a0 <offset>($fp)
>>

addParams(loadParam) ::= <<
<loadParam>
    sw $a0 0($sp)
    addiu $sp $sp -4

>>

assign(storeValue, value) ::= <<
<value>
<storeValue>
>>

let(inits, body) ::= <<
<inits>
<body>
>>

initLocal(initialization, offset) ::= <<
<initialization>
    sw $a0 <offset>($fp)
>>

newObject(object) ::= <<
    la $a0 <object>_protObj
    jal Object.copy
    jal <object>_init
>>

newSelfType() ::= <<
    la $t1 class_objTab
    lw $t2 0($s0) # class tag
    sll $t2 $t2 3 # *8
    addu $t1 $t1 $t2 # class_objTab + 8 * tag
    sw $t1 0($sp) # push t1 on stack
    addiu $sp $sp -4
    lw $a0 0($t1) # _protObj
    jal Object.copy
    lw $t1 4($sp)
    addiu $sp $sp 4 # pop t1 from stack
    lw $t1 4($t1) # _init
    jalr $t1
>>

iff(condition, thenBranch, elseBranch, id) ::= <<
<condition>
    lw $t1 12($a0)     # bool slot
    beqz $t1 else<id>
<thenBranch>
    b       endif<id>
else<id>:
<elseBranch>
endif<id>:
>>

isVoid(expr, id) ::= <<
<expr>
    move    $t1 $a0
    la      $a0 bool_const1
    beqz    $t1 isvoid<id>
    la      $a0 bool_const0
isvoid<id>:
>>

nott(expr, id) ::= <<
<expr>
    lw      $t1 12($a0)     # bool slot
    la      $a0 bool_const1
    beqz    $t1 not<id>
    la      $a0 bool_const0
not<id>:
>>

plus(e1, e2) ::= <<
<e1>
    sw $a0 0($sp)
    addiu $sp $sp -4
<e2>
    jal Object.copy
    lw $t1 4($sp)
    addiu $sp $sp 4
    lw $t1 12($t1)     # int slot
    lw $t2 12($a0)     # int slot
    add $t1 $t1 $t2
    sw $t1 12($a0)     # int slot
>>

minus(e1, e2) ::= <<
<e1>
    sw $a0 0($sp)
    addiu $sp $sp -4
<e2>
    jal Object.copy
    lw $t1 4($sp)
    addiu $sp $sp 4
    lw $t1 12($t1)     # int slot
    lw $t2 12($a0)     # int slot
    sub $t1 $t1 $t2
    sw $t1 12($a0)     # int slot
>>

mult(e1, e2) ::= <<
<e1>
    sw $a0 0($sp)
    addiu $sp $sp -4
<e2>
    jal Object.copy
    lw $t1 4($sp)
    addiu $sp $sp 4
    lw $t1 12($t1)     # int slot
    lw $t2 12($a0)     # int slot
    mul $t1 $t1 $t2
    sw $t1 12($a0)     # int slot
>>

div(e1, e2) ::= <<
<e1>
    sw $a0 0($sp)
    addiu $sp $sp -4
<e2>
    jal Object.copy
    lw $t1 4($sp)
    addiu $sp $sp 4
    lw $t1 12($t1)     # int slot
    lw $t2 12($a0)     # int slot
    div $t1 $t1 $t2
    sw $t1 12($a0)     # int slot
>>

unaryMinus(e1) ::= <<
<e1>
    jal     Object.copy
    lw      $t1 12($a0)     # int slot
    neg     $t1 $t1
    sw      $t1 12($a0)     # int slot
>>

eq(e1, e2, id) ::= <<
<e1>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
<e2>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    move    $t2 $a0
    la      $a0 bool_const1
    beq     $t1 $t2 eq<id>
    la      $a1 bool_const0
    jal     equality_test
eq<id>:
>>

lt(e1, e2, id) ::= <<
<e1>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
<e2>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)     # int slot
    lw      $t2 12($a0)     # int slot
    la      $a0 bool_const1
    blt     $t1 $t2 compare<id>
    la      $a0 bool_const0
compare<id>:
>>

le(e1, e2, id) ::= <<
<e1>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
<e2>
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 12($t1)     # int slot
    lw      $t2 12($a0)     # int slot
    la      $a0 bool_const1
    ble     $t1 $t2 compare<id>
    la      $a0 bool_const0
compare<id>:
>>

while(condition, body, id) ::= <<
while<id>:
<condition>
    lw      $t1 12($a0)     # bool slot
    beqz    $t1 endwhile<id>
<body>
    b       while<id>
endwhile<id>:
    move    $a0 $zero
>>

caseBody(body, classTagMin, classTagMax, id, endCaseID) ::= <<
    blt     $t1 <classTagMin> casebranch<id>
    bgt     $t1 <classTagMax> casebranch<id>
<body>
    b       endcase<endCaseID>
casebranch<id>:

>>

case(expr, bodies, id, endCaseID, fileNameID, line) ::= <<
    move    $s0 $a0
<expr>
    bnez    $a0 case<id>
    la      $a0 str_const<fileNameID>
    li      $t1 <line>
    jal     _case_abort2
case<id>:
    sw      $a0 -4($fp)
    lw      $t1 0($a0)      # class tag
<bodies>
    lw      $a0 -4($fp)
    jal     _case_abort
endcase<endCaseID>:
>>

initEmpty() ::= <<
    move    $a0 $zero
>>